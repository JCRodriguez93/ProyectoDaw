/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.swagger.codegen.api;

import es.swagger.codegen.models.DeleteResponse;
import es.swagger.codegen.models.ErrorResponse;
import es.swagger.codegen.models.User;
import es.swagger.codegen.models.UserCreatedResponse;
import es.swagger.codegen.models.UserResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-06-11T20:45:41.200175600+02:00[Europe/Madrid]")
@Validated
public interface UsersApi {

    @Operation(summary = "Crear un nuevo usuario", description = "Permite a cualquier persona crear una nueva cuenta de usuario.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Usuario creado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserCreatedResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserCreatedResponse> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "Datos del nuevo usuario", required=true, schema=@Schema()) @Valid @RequestBody User body);


    @Operation(summary = "Eliminar usuario", description = "Permite a los usuarios autenticados eliminar su propia cuenta.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Usuario eliminado exitosamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "No autorizado (Unauthorized)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Acceso denegado (Forbidden)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Users/{idUser}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteResponse> deleteUser(@Parameter(in = ParameterIn.PATH, description = "ID único del usuario que se desea eliminar", required=true, schema=@Schema()) @PathVariable("idUser") Integer idUser);


    @Operation(summary = "Obtener datos de un usuario por su ID", description = "Permite obtener los datos de un usuario autenticado mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Usuario encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "No autorizado (Unauthorized)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Acceso denegado (Forbidden)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Users/{idUser}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@Parameter(in = ParameterIn.PATH, description = "ID único del usuario que se desea obtener", required=true, schema=@Schema()) @PathVariable("idUser") Integer idUser);


    @Operation(summary = "Obtener todos los usuarios", description = "Solo los usuarios con rol ADMIN pueden obtener todos los usuarios.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "No autorizado (Unauthorized)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Acceso denegado (Forbidden)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserResponse> getUsers();


    @Operation(summary = "Actualizar datos de usuario", description = "Permite a los usuarios autenticados actualizar su propia información. No se permite cambiar el rol ni el ID del usuario.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Usuario actualizado satisfactoriamente."),
        
        @ApiResponse(responseCode = "400", description = "Error en la solicitud o datos incorrectos."),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado."),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.") })
    @RequestMapping(value = "/Users/{idUser}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "ID único del usuario que se desea actualizar", required=true, schema=@Schema()) @PathVariable("idUser") Integer idUser, @Parameter(in = ParameterIn.DEFAULT, description = "Nuevos datos del usuario", required=true, schema=@Schema()) @Valid @RequestBody User body);

}

