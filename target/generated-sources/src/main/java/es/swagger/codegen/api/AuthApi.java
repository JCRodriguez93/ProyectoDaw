/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.swagger.codegen.api;

import es.swagger.codegen.models.AuthResponse;
import es.swagger.codegen.models.LoginRequest;
import es.swagger.codegen.models.LogoutResponse;
import es.swagger.codegen.models.RegisterRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-06-11T20:45:41.200175600+02:00[Europe/Madrid]")
@Validated
public interface AuthApi {

    @Operation(summary = "Iniciar sesión", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Authentication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Inicio de sesión exitoso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Datos inválidos (credenciales faltantes o formato incorrecto)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Credenciales incorrectas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "Acceso denegado (usuario bloqueado, no activado, etc.)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))) })
    @RequestMapping(value = "/auth/login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AuthResponse> loginUser(@Parameter(in = ParameterIn.DEFAULT, description = "Credenciales necesarias para autenticar al usuario", required=true, schema=@Schema()) @Valid @RequestBody LoginRequest body);


    @Operation(summary = "Cerrar sesión", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Authentication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Sesión cerrada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LogoutResponse.class))) })
    @RequestMapping(value = "/auth/logout",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<LogoutResponse> logoutUser();


    @Operation(summary = "Registrar un nuevo usuario", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Authentication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Usuario registrado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Datos inválidos (por ejemplo, falta algún campo obligatorio)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "409", description = "Conflicto (por ejemplo, el email ya está en uso)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AuthResponse.class))) })
    @RequestMapping(value = "/auth/register",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AuthResponse> registerUser(@Parameter(in = ParameterIn.DEFAULT, description = "Datos necesarios para registrar un usuario", required=true, schema=@Schema()) @Valid @RequestBody RegisterRequest body);

}

