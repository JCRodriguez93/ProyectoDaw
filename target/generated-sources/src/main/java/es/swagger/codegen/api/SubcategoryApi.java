/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.swagger.codegen.api;

import es.swagger.codegen.models.ErrorResponse;
import es.swagger.codegen.models.SubcategoriesResponse;
import es.swagger.codegen.models.Subcategory;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-06-11T21:40:46.220561900+02:00[Europe/Madrid]")
@Validated
public interface SubcategoryApi {

    @Operation(summary = "Crear una nueva subcategoría", description = "Permite a los administradores crear una nueva subcategoría proporcionando los datos requeridos.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Subcategories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Subcategoría creada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Subcategory.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Subcategory",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Subcategory> createSubcategory(@Parameter(in = ParameterIn.DEFAULT, description = "Datos de la nueva subcategoría", required=true, schema=@Schema()) @Valid @RequestBody Subcategory body);


    @Operation(summary = "Eliminar una subcategoría por ID", description = "Permite a los administradores eliminar una subcategoría específica mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Subcategories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Subcategoría eliminada exitosamente"),
        
        @ApiResponse(responseCode = "404", description = "Subcategoría no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Subcategory/{idSubcategory}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubcategory(@Parameter(in = ParameterIn.PATH, description = "ID único de la subcategoría a eliminar", required=true, schema=@Schema()) @PathVariable("idSubcategory") Integer idSubcategory);


    @Operation(summary = "Obtener todas las subcategorías", description = "Permite a cualquier usuario obtener la lista de subcategorías disponibles.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Subcategories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de subcategorías obtenida exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SubcategoriesResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontraron subcategorías", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Subcategory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SubcategoriesResponse> getSubcategories();


    @Operation(summary = "Obtener una subcategoría por ID", description = "Permite a cualquier usuario obtener los datos de una subcategoría específica mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Subcategories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Subcategoría obtenida exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Subcategory.class))),
        
        @ApiResponse(responseCode = "404", description = "Subcategoría no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Subcategory/{idSubcategory}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Subcategory> getSubcategoryById(@Parameter(in = ParameterIn.PATH, description = "ID único de la subcategoría a obtener", required=true, schema=@Schema()) @PathVariable("idSubcategory") Integer idSubcategory);


    @Operation(summary = "Actualizar una subcategoría por ID", description = "Permite a los administradores actualizar los datos de una subcategoría específica.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Subcategories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Subcategoría actualizada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Subcategory.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Subcategoría no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Subcategory/{idSubcategory}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Subcategory> updateSubcategory(@Parameter(in = ParameterIn.PATH, description = "ID único de la subcategoría a actualizar", required=true, schema=@Schema()) @PathVariable("idSubcategory") Integer idSubcategory, @Parameter(in = ParameterIn.DEFAULT, description = "Nuevos datos para la subcategoría", required=true, schema=@Schema()) @Valid @RequestBody Subcategory body);

}

