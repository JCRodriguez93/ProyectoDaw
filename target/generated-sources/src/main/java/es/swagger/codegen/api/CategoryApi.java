/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.swagger.codegen.api;

import es.swagger.codegen.models.CategoriesResponse;
import es.swagger.codegen.models.Category;
import es.swagger.codegen.models.DeleteResponse;
import es.swagger.codegen.models.ErrorResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-06-11T21:40:46.220561900+02:00[Europe/Madrid]")
@Validated
public interface CategoryApi {

    @Operation(summary = "Crear una nueva categoría", description = "Permite crear una nueva categoría en la base de datos.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Categories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Categoría creada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Category",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Category> createCategory(@Parameter(in = ParameterIn.DEFAULT, description = "Datos de la nueva categoría", required=true, schema=@Schema()) @Valid @RequestBody Category body);


    @Operation(summary = "Eliminar una categoría", description = "Permite eliminar una categoría mediante su ID.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Categories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Categoría eliminada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Categoría no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Category/{idCategory}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DeleteResponse> deleteCategory(@Parameter(in = ParameterIn.PATH, description = "ID único de la categoría que se desea eliminar", required=true, schema=@Schema()) @PathVariable("idCategory") Integer idCategory);


    @Operation(summary = "Obtener todas las categorías", description = "Permite a cualquier usuario obtener la lista de categorías disponibles, incluyendo sus subcategorías.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Categories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de categorías obtenida exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CategoriesResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontraron categorías", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Category",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CategoriesResponse> getCategories();


    @Operation(summary = "Obtener una categoría por ID", description = "Permite obtener los datos de una categoría mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Categories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Categoría encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Categoría no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Category/{idCategory}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Category> getCategoryById(@Parameter(in = ParameterIn.PATH, description = "ID único de la categoría", required=true, schema=@Schema()) @PathVariable("idCategory") Integer idCategory);


    @Operation(summary = "Actualizar datos de una categoría", description = "Permite a los usuarios autenticados con privilegios actualizar la información de una categoría. No se permite cambiar el ID de la categoría.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Categories" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Categoría actualizada satisfactoriamente (sin contenido)."),
        
        @ApiResponse(responseCode = "400", description = "Error en la solicitud o datos incorrectos.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Categoría no encontrada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Category/{idCategory}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCategory(@Parameter(in = ParameterIn.PATH, description = "ID único de la categoría que se desea actualizar", required=true, schema=@Schema()) @PathVariable("idCategory") Integer idCategory, @Parameter(in = ParameterIn.DEFAULT, description = "Nuevos datos de la categoría", required=true, schema=@Schema()) @Valid @RequestBody Category body);

}

