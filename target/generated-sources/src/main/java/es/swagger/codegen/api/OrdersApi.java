/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.swagger.codegen.api;

import es.swagger.codegen.models.ErrorResponse;
import es.swagger.codegen.models.Orders;
import es.swagger.codegen.models.OrdersResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-06-11T20:45:41.200175600+02:00[Europe/Madrid]")
@Validated
public interface OrdersApi {

    @Operation(summary = "Crear un nuevo pedido", description = "Permite a un usuario realizar un nuevo pedido. El pedido es creado con la información proporcionada.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Pedido creado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Orders.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Orders",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Orders> createOrder(@Parameter(in = ParameterIn.DEFAULT, description = "Datos del nuevo pedido", required=true, schema=@Schema()) @Valid @RequestBody Orders body);


    @Operation(summary = "Eliminar un pedido por ID", description = "Permite a un usuario eliminar un pedido específico mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Pedido eliminado exitosamente"),
        
        @ApiResponse(responseCode = "404", description = "Pedido no encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Orders/{idOrder}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@Parameter(in = ParameterIn.PATH, description = "ID único del pedido a eliminar", required=true, schema=@Schema()) @PathVariable("idOrder") Integer idOrder);


    @Operation(summary = "Obtener un pedido por ID", description = "Permite a un usuario obtener los detalles de un pedido específico mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Pedido encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Orders.class))),
        
        @ApiResponse(responseCode = "404", description = "Pedido no encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Orders/{idOrder}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Orders> getOrderById(@Parameter(in = ParameterIn.PATH, description = "ID único del pedido a obtener", required=true, schema=@Schema()) @PathVariable("idOrder") Integer idOrder);


    @Operation(summary = "Obtener todos los pedidos", description = "Permite a cualquier usuario obtener la lista de pedidos realizados.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de pedidos obtenida exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrdersResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontraron pedidos", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrdersResponse> getOrders();


    @Operation(summary = "Actualizar un pedido por ID", description = "Permite a un usuario actualizar los datos de un pedido específico mediante su ID único.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Pedido actualizado exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Orders.class))),
        
        @ApiResponse(responseCode = "400", description = "Solicitud incorrecta (Bad Request)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Pedido no encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/Orders/{idOrder}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Orders> updateOrder(@Parameter(in = ParameterIn.PATH, description = "ID único del pedido a actualizar", required=true, schema=@Schema()) @PathVariable("idOrder") Integer idOrder, @Parameter(in = ParameterIn.DEFAULT, description = "Nuevos datos del pedido", required=true, schema=@Schema()) @Valid @RequestBody Orders body);

}

