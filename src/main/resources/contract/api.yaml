openapi: 3.0.0
info:
  title: Proyecto DAW - Empresa de Tatuajes
  description: API para manejar el back-end de una empresa de tatuajes.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Servidor local
paths:
  /roles:
    get:
      summary: Obtener todos los roles
      description: "Solo los usuarios con rol ADMIN pueden obtener todos los roles."
      operationId: getRoles
      tags:
        - Roles
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: RoleResponse
                properties:
                  Roles:
                    type: array
                    description: Lista de roles
                    items:
                      $ref: "#/components/schemas/Role"

        '401':
          description: No autorizado (Unauthorized)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado (Forbidden)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /roles/{idRole}:
    put:
      summary: Actualizar un rol existente
      description: "Solo los usuarios con rol ADMIN pueden actualizar un rol."
      operationId: putRoleId
      tags:
        - Roles
      parameters:
        - in: path
          name: idRole
          required: true
          schema:
            type: string
          description: identificador del rol
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        '200':
          description: Rol actualizado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Datos inválidos enviados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado (Unauthorized)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado (Forbidden)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Rol no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /Users:
    get:
      summary: Obtener todos los usuarios
      description: "Solo los usuarios con rol ADMIN pueden obtener todos los usuarios."
      operationId: getUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: UserResponse
                properties:
                  Users:
                    type: array
                    description: Lista de usuarios
                    items:
                      $ref: "#/components/schemas/User"

        '401':
          description: No autorizado (Unauthorized)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado (Forbidden)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Crear un nuevo usuario
      description: "Permite a cualquier persona crear una nueva cuenta de usuario."
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: Datos del nuevo usuario
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreatedResponse"
        '400':
          description: Solicitud incorrecta (Bad Request)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /Users/{idUser}:
    get:
      summary: Obtener datos de un usuario por su ID
      description: "Permite obtener los datos de un usuario autenticado mediante su ID único."
      operationId: getUserById
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: idUser
          in: path
          required: true
          description: ID único del usuario que se desea obtener
          schema:
            type: integer
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"  # Esquema que representa un usuario
        '400':
          description: Solicitud incorrecta (Bad Request)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado (Unauthorized)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado (Forbidden)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Actualizar datos de usuario
      description: "Permite a los usuarios autenticados actualizar su propia información. No se permite cambiar el rol ni el ID del usuario."
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: idUser
          in: path
          required: true
          description: ID único del usuario que se desea actualizar
          schema:
            type: integer
      requestBody:
        description: Nuevos datos del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Usuario actualizado satisfactoriamente.
        "400":
          description: Error en la solicitud o datos incorrectos.
        "404":
          description: Usuario no encontrado.
        "500":
          description: Error interno del servidor.






    delete:
      summary: Eliminar usuario
      description: "Permite a los usuarios autenticados eliminar su propia cuenta."
      operationId: deleteUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: idUser
          in: path
          required: true
          schema:
            type: integer
          description: ID único del usuario que se desea eliminar
      responses:
        "200":
          description: Usuario eliminado exitosamente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        '400':
          description: Solicitud incorrecta (Bad Request)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado (Unauthorized)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado (Forbidden)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'










  /Category:
    get:
      summary: Obtener todas las categorías
      description: "Permite a cualquier usuario obtener la lista de categorías disponibles."
      operationId: getCategories
      tags:
        - Categories
      responses:
        "200":
          description: Lista de categorías obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                title: CategoriesResponse
                properties:
                  categories:
                    type: array
                    description: Lista de categorías disponibles
                    items:
                      $ref: "#/components/schemas/Category"
        "404":
          description: No se encontraron categorías
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /Subcategory:
    get:
      summary: Obtener todas las subcategorías
      description: "Permite a cualquier usuario obtener la lista de subcategorías disponibles."
      operationId: getSubcategories
      tags:
        - Subcategories
      responses:
        "200":
          description: Lista de subcategorías obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                title: SubcategoriesResponse
                properties:
                  subcategories:
                    type: array
                    description: Lista de subcategorías disponibles
                    items:
                      $ref: "#/components/schemas/Subcategory"
        "404":
          description: No se encontraron subcategorías
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /Products:
    get:
      summary: Obtener todos los productos
      description: "Permite a cualquier usuario obtener la lista de productos disponibles."
      operationId: getProducts
      tags:
        - Products
      responses:
        "200":
          description: Lista de productos obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                title: ProductsResponse
                properties:
                  products:
                    type: array
                    description: Lista de productos disponibles
                    items:
                      $ref: "#/components/schemas/Products"
        "404":
          description: No se encontraron productos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /Orders:
    get:
      summary: Obtener todos los pedidos
      description: "Permite a cualquier usuario obtener la lista de pedidos realizados."
      operationId: getOrders
      tags:
        - Orders
      responses:
        "200":
          description: Lista de pedidos obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                title: OrdersResponse
                properties:
                  orders:
                    type: array
                    description: Lista de pedidos realizados
                    items:
                      $ref: "#/components/schemas/Orders"
        "404":
          description: No se encontraron pedidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    # Objeto roles actualizado (no tocar)
    Role:
      type: object
      properties:
        idRole:
          type: integer
          format: int32
          description: Identificador único del rol
        roleName:
          type: string
          description: Nombre del rol

    # Objeto usuario actualizado (no tocar)
    User:
      type: object
      properties:
        idUser:
          type: integer
          format: int32
          description: Identificador único del usuario
        userName:
          type: string
          description: Nombre del usuario
          maxLength: 50
        userSurname:
          type: string
          description: Apellidos del usuario
          maxLength: 100
        userBirth:
          type: string
          format: date-time
          description: Fecha de nacimiento del usuario
        email:
          type: string
          format: email
          description: Correo electrónico único del usuario
          maxLength: 100
        password:
          type: string
          description: Contraseña del usuario en formato hash
          maxLength: 255
        roleId:
          type: integer
          description: ID del rol del usuario
      required:
        - idUser
        - userName
        - userSurname
        - userBirth
        - email
        - password
        - roleId

    # Categorías actualizadas (no tocar)
    Category:
      type: object
      properties:
        idCategory:
          type: integer
          format: int32
          description: Identificador único de la categoría
        name:
          type: string
          description: Nombre de la categoría
          maxLength: 50
        description:
          type: string
          description: Descripción de la categoría
          nullable: true  # Especifica que puede ser null si no es obligatorio en la base de datos
      required:
        - idCategory
        - name

    # Subcategorías actualizadas (no tocar)
    Subcategory:
      type: object
      properties:
        idSubcategory:
          type: integer
          format: int32
          description: Identificador único de la subcategoría
        idCategory:
          type: integer
          format: int32
          description: Identificador único de la categoría asociada
        name:
          type: string
          description: Nombre de la subcategoría
          maxLength: 50
        description:
          type: string
          description: Descripción de la subcategoría
          nullable: true  # Indica que la descripción puede ser opcional
      required:
        - idSubcategory
        - idCategory
        - name

    # Productos actualizados (no tocar)
    Products:
      type: object
      properties:
        idProduct:
          type: integer
          format: int32
          description: Identificador único del producto
        idSubcategory:
          type: integer
          format: int32
          description: Identificador único de la subcategoría asociada
        name:
          type: string
          description: Nombre del producto
          maxLength: 100
        description:
          type: string
          description: Descripción detallada del producto
          nullable: true
        price:
          type: number
          format: double
          description: Precio del producto con exactamente dos decimales
      required:
        - idProduct
        - idSubcategory
        - name
        - price

    # Ordenes actualizadas (no tocar)
    Orders:
      type: object
      properties:
        idOrder:
          type: integer
          format: int32
          description: Identificador único del pedido
        idUser:
          type: integer
          format: int32
          description: Identificador único del usuario que realizó el pedido
        totalQuantity:
          type: integer
          format: int32
          description: Cantidad total de productos en el pedido
        totalPrice:
          type: number
          format: double
          description: Precio total del pedido
        date:
          type: string
          format: date-time
          description: Fecha
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
      required:
        - idOrder
        - idUser
        - totalQuantity
        - totalPrice
        - date
        - orderStatus

    # Estado de la orden (correcto - no tocar)
    OrderStatus:
      type: string
      enum: ['PENDIENTE', 'PAGADO', 'CANCELADO']
      default: 'PENDIENTE'

    # Correcto (se supone)
    OrderProducts:
      type: object
      properties:
        idOrderProduct:
          type: integer
          format: int32
          description: Identificador único del producto en el pedido
        idOrder:
          type: integer
          format: int32
          description: Identificador único del pedido
        idProduct:
          type: integer
          format: int32
          description: Identificador único del producto asociado al pedido
        quantity:
          type: integer
          format: int32
          description: Cantidad del producto en el pedido (debe ser mayor a 0)
          minimum: 1
      required:
        - idOrderProduct
        - idOrder
        - idProduct
        - quantity

    # Listas de objetos

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
      description: Respuesta que contiene una lista de usuarios

    CategoryListResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
      description: Respuesta que contiene una lista de categorías

    SubcategoryListResponse:
      type: object
      properties:
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/Subcategory'
      required:
        - subcategories

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Products'
      required:
        - products

    OrderListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Orders'
      required:
        - orders

    OrderStatusListResponse:
      type: object
      properties:
        orderStatuses:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
      required:
        - orderStatuses



    UserCreatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Usuario creado correctamente."
        user:
          $ref: "#/components/schemas/User"

    DeleteResponse:
      type: object
      properties:
        message:
          type: string
          description: Mensaje indicando el éxito de la operación.
      required:
        - message

    UpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: "Usuario actualizado correctamente."
        updatedUser:
          $ref: "#/components/schemas/User"
      required:
        - message
        - updatedUser











    # esto de momento palante
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Código del error
        errorMessage:
          type: string
          description: Descripción del error
security:
  - bearerAuth: []